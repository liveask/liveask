name: ci

on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  TRUNK_VERSION: v0.17.5

jobs:

# CHECK / TEST

  check_and_test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [nightly, stable]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }} # nightly is ok to fail
    steps:
    - uses: actions/checkout@v3
    - name: Restore cargo cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ${{ matrix.os }}-${{ matrix.rust }}
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: wasm32-unknown-unknown
        components: clippy
    - name: Install cargo-make
      run: |
        which cargo-make || cargo install cargo-make
    - name: Install Test Runner
      run: |
        which wasm-bindgen-test-runner || cargo install wasm-bindgen-cli
    - name: Check FE
      run: |
        cd frontend
        cargo make checks_ci
    - name: Check BE
      run: |
        cd backend
        cargo make checks_ci
    - name: Test FE
      run: |
        cd frontend
        cargo make test
    - name: Test BE
      run: |
        cd backend
        cargo t

  check_udeps:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [nightly]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Restore cargo cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ${{ matrix.os }}-${{ matrix.rust }}
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: wasm32-unknown-unknown
    - name: Install cargo-make
      run: |
        which cargo-make || cargo install cargo-make
    - name: Check FE
      run: |
        cd frontend
        cargo make udeps
    - name: Check BE
      run: |
        cd backend
        cargo make udeps

# DEPLOY

# BACKEND

  be_deploy_beta:
    runs-on: ubuntu-latest
    environment: beta
    needs: ["check_and_test"]
    steps:
    - uses: actions/checkout@v3
    - name: Restore cargo cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ubuntu-latest-stable
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: BE release build
      run: |
        cd backend
        cargo build --release
        mkdir linux_bin
        cp ../target/release/liveask-server linux_bin/server
    - name: Docker build
      run: |
        cd backend
        docker build -t liveask/server:latest .
    - name: Login to Docker Hub
      run: |
        docker login \
        -u liveask \
        -p ${{ secrets.DOCKER_PASSWORD }}
    - name: Publish Docker image
      run: |
        docker push liveask/server
        docker tag liveask/server liveask/server:beta
        docker push liveask/server:beta

    # comment when disabling beta (1/3)
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_KEY_SECRET }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        ECS_CLUSTER: la-ecs-cluster-beta
      run: |
        aws sts get-caller-identity
        ECS_SERVICE_ARN=$(aws ecs list-services --region=${AWS_DEFAULT_REGION} --cluster=${ECS_CLUSTER} --output=text | head -1 | awk '{print $2}')
        aws ecs update-service --region=${AWS_DEFAULT_REGION} --service=${ECS_SERVICE_ARN} --cluster=${ECS_CLUSTER} --force-new-deployment

    - name: Set short git SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: la-server
      with:
        environment: beta
        set_commits: skip
        version: ${{ steps.vars.outputs.sha_short }}

  backend-e2e:
    runs-on: ubuntu-latest
    needs: ["be_deploy_beta"]
    steps:
    - uses: actions/checkout@v3
    - name: Restore cargo cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ubuntu-latest-stable
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Test Prod
      run: |
        cd backend-e2e
        make e2e-test-remote

    # comment when disabling beta (2/3)
    - name: Test Beta
      run: |
        cd backend-e2e
        make e2e-test-beta

# FRONTEND
  
  fe_deploy_beta:
    runs-on: ubuntu-latest
    environment: beta
    needs: ["check_and_test"]
    steps:
    - uses: actions/checkout@v3
    - name: Restore cargo cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ubuntu-latest-stable
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: wasm32-unknown-unknown
        components: clippy
    - name: Install cargo-make
      run: |
        which cargo-make || cargo install cargo-make
    - name: Install Trunk
      run: |
        wget -qO- https://github.com/thedodd/trunk/releases/download/${TRUNK_VERSION}/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
        mv trunk /usr/local/bin/trunk
        trunk --version
    - name: Build
      env:
        LA_ENV: "beta"
      run: |
        cd frontend
        #TODO: un-dupe once we have a better solution to change FE configs
        cargo make cargo-check
        cargo make build-and-check

    # comment when disabling beta (3/3)      
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_KEY_SECRET }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        cd frontend/dist
        aws sts get-caller-identity
        aws s3 sync . s3://beta.live-ask.com --acl public-read --no-progress --delete --cache-control "public, max-age=86400" --exclude "index.html" --exclude "worker2_bg.wasm"
        aws s3 cp ./index.html s3://beta.live-ask.com --acl public-read --no-progress --cache-control "public, max-age=120"
        aws s3 cp ./worker2_bg.wasm s3://beta.live-ask.com --acl public-read --no-progress --cache-control "public, max-age=120"
        aws cloudfront create-invalidation --distribution-id EJFNBPSNYQSP9 --paths "/*"

    - name: Set short SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: liveask
      with:
        environment: beta
        set_commits: skip
        version: ${{ steps.vars.outputs.sha_short }}

  