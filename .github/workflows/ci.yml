name: ci

on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:

# CHECK / TEST

  check_and_test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [nightly, stable]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }} # nightly is ok to fail
    steps:
    - uses: actions/checkout@v2
    - name: Restore cargo cache
      uses: actions/cache@v2
      env:
        cache-name: ci
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
        key: ${{ matrix.os }}-${{ env.cache-name }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: wasm32-unknown-unknown
        default: true
        profile: minimal
        components: clippy
    - name: Install cargo-make
      run: |
        which cargo-make || cargo install cargo-make
    - name: Install Test Runner
      run: |
        which wasm-bindgen-test-runner || cargo install wasm-bindgen-cli
    - name: Check FE
      run: |
        cd frontend
        cargo make la-check
    - name: Check BE
      run: |
        cd backend
        cargo make check
    - name: Test FE
      run: |
        cd frontend
        cargo make test
    - name: Test BE
      run: |
        cd backend
        cargo t

# DEPLOY

# BACKEND

  be_deploy_beta:
    runs-on: ubuntu-latest
    environment: beta
    needs: ["check_and_test"]
    steps:
    - uses: actions/checkout@v2
    - name: Restore cargo cache
      uses: actions/cache@v2
      env:
        cache-name: ci
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
        key: ${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        profile: minimal
    - name: BE release build
      run: |
        cd backend
        cargo build --release
        mkdir linux_bin
        cp ../target/release/liveask-server linux_bin/server
    - name: Docker build
      run: |
        cd backend
        docker build -t liveask/server:latest .
    - name: Login to Docker Hub
      run: |
        docker login \
        -u liveask \
        -p ${{ secrets.DOCKER_PASSWORD }}
    - name: Publish Docker image
      run: docker push liveask/server
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        ECS_CLUSTER: ecs-cluster
      run: |
        ECS_SERVICE_ARN=$(aws ecs list-services --region=eu-west-1 --cluster=${ECS_CLUSTER} --output=text | head -1 | awk '{print $2}')
        aws ecs update-service --region=eu-west-1 --service=${ECS_SERVICE_ARN} --cluster=${ECS_CLUSTER} --force-new-deployment

  backend-e2e:
    runs-on: ubuntu-latest
    needs: ["be_deploy_beta"]
    steps:
    - uses: actions/checkout@v2
    - name: Restore cargo cache
      uses: actions/cache@v2
      env:
        cache-name: ci
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
        key: be-linux-${{ env.cache-name }}-stable_rust-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        profile: minimal
    - name: Test Beta
      run: |
        cd backend-e2e
        make e2e-test-beta
    - name: Test Prod
      run: |
        cd backend-e2e
        make e2e-test-remote

# FRONTEND
  
  fe_deploy_beta:
    runs-on: ubuntu-latest
    environment: beta
    needs: ["check_and_test"]
    steps:
    - uses: actions/checkout@v2
    - name: Restore cargo cache
      uses: actions/cache@v2
      env:
        cache-name: ci
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
        key: linux-${{ env.cache-name }}-stable-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        default: true
        profile: minimal
        components: clippy
    - name: Install cargo-make
      run: |
        which cargo-make || cargo install cargo-make
    - name: Install Trunk
      run: |
        wget -qO- https://github.com/thedodd/trunk/releases/download/v0.16.0/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
        mv trunk /usr/local/bin/trunk
    - name: Build
      env:
        IS_BETA: 1
      run: |
        cd frontend
        #TODO: un-dupe once we have a better solution to change FE configs
        cargo make cargo-check
        cargo make build-and-check
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        cd frontend/dist
        aws s3 sync . s3://beta.live-ask.com --acl public-read --no-progress --delete --cache-control "public, max-age=5184000" --exclude index.html
        aws s3 cp ./index.html s3://beta.live-ask.com --acl public-read --no-progress --cache-control "public, max-age=21600"
        aws cloudfront create-invalidation --distribution-id EJFNBPSNYQSP9 --paths /index.html